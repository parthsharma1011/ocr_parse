name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test directories
      run: |
        mkdir -p Data Output
    
    - name: Test basic imports
      run: |
        python -c "import sys; print(f'Python {sys.version}')"
        python -c "import pathlib; print('✅ pathlib works')"
        python -c "import os; print('✅ os works')"
        python -c "import hashlib; print('✅ hashlib works')"
    
    - name: Test configuration module
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            import config
            print('✅ Config module imported')
        except Exception as e:
            print(f'❌ Config import failed: {e}')
            sys.exit(1)
        "
    
    - name: Test utils module
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            import utils
            print('✅ Utils module imported')
            # Test basic functions
            from utils import generate_hash, validate_input
            hash_result = generate_hash('test')
            input_result = validate_input('test input')
            print('✅ Utils functions work')
        except Exception as e:
            print(f'❌ Utils test failed: {e}')
            sys.exit(1)
        "
    
    - name: Test OCR module (import only)
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            # Test if we can import the module
            import pdf_ocr
            print('✅ PDF OCR module imported')
        except ImportError as e:
            print(f'❌ Import failed: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'⚠️  Import succeeded but initialization may need API key: {e}')
        "
    
    - name: Run CI tests
      env:
        GEMINI_API_KEY: test_key_for_ci_testing
      run: |
        python test_ci.py

  lint:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install linting tools
      run: |
        pip install flake8 bandit
    
    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,env,.venv
    
    - name: Run security scan
      run: |
        bandit -r . --exclude ./venv,./env,./.venv -f json -o bandit-report.json || true
        bandit -r . --exclude ./venv,./env,./.venv || true
    
    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results-${{ github.sha }}
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create build package
      run: |
        mkdir -p build
        cp *.py build/
        cp requirements.txt .env.example README.md build/
        echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" > build/build_info.txt
        echo "COMMIT_SHA=${{ github.sha }}" >> build/build_info.txt
        echo "BRANCH=${{ github.ref_name }}" >> build/build_info.txt
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ocr-app-build-${{ github.sha }}
        path: build/
        retention-days: 30