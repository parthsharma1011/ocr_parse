name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Create test directories
      run: |
        mkdir -p Data Output
        echo "Test directories created"
    
    - name: Test module imports
      run: |
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import config; print('✅ Config module imported successfully')"
        python -c "import utils; print('✅ Utils module imported successfully')"
    
    - name: Test OCR module import (without API key)
      run: |
        python -c "
        try:
            import pdf_ocr
            print('✅ PDF OCR module imported successfully')
        except ImportError as e:
            print(f'❌ Import failed: {e}')
            exit(1)
        "
    
    - name: Run unit tests
      env:
        GEMINI_API_KEY: test_key_for_ci
      run: |
        python test.py

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json --exclude ./venv,./env,./.venv || true
        bandit -r . --exclude ./venv,./env,./.venv || true
    
    - name: Check for known vulnerabilities
      run: |
        safety check --ignore 70612 || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create application package
      run: |
        mkdir -p dist
        cp *.py dist/
        cp requirements.txt .env.example README.md dist/
        cp -r .github dist/ || true
        echo "Application packaged successfully"
    
    - name: Create version info
      run: |
        echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> dist/build_info.txt
        echo "COMMIT_SHA=${GITHUB_SHA}" >> dist/build_info.txt
        echo "BRANCH=${GITHUB_REF_NAME}" >> dist/build_info.txt
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ocr-app-${{ github.sha }}
        path: dist/
        retention-days: 30